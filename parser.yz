
open YzPervasives
open Printf

type t:
  lexer : Lexer.t
  mutable token : Token.t
  mutable pos : Pos.t

type sep_or_term:
  def Sep
  def Term
  def Neither

def create(lexer): {
  lexer = lexer;
  token = Token.EOF;
  pos = Pos.dummy;
}

def make_cons_pattern(pos, lhs, rhs):
  var tuple_pattern = Pattern.at(pos, Pattern.Tuple([lhs;rhs]))
  Pattern.at(pos, Pattern.Ctor(([], Names.Op("::")), Some(tuple_pattern)))

var nil_pattern = Pattern.Ctor(([], Names.Op("[]")), None)
var unit_pattern = Pattern.Con(Literal.Unit)

def make_op_var(str):
  Expr.Var(([], Names.Op(str)), ref())

var cons_op = ([], Names.Op("::"))
var nil_expr = Expr.Ctor(([], Names.Op("[]")), None)
var unit_expr = Expr.Con(Literal.Unit)

var exn_type_expr = TypeExpr.Con([], "exn")

def make_abs(pos, params, body_expr):
  def mk_abs(param, expr):
    Expr.at(pos, Expr.Abs(param, expr))
  List.fold_right(mk_abs, params, body_expr)

def make_app(pos, fun_expr, arg_exprs):
  def mk_app(e1, e2):
    Expr.at(pos, Expr.App(e1, e2))
  List.fold_left(mk_app, fun_expr, arg_exprs)

def expected(parser, str_token):
  Pos.show_error(
    parser.pos,
    sprintf("unexpected %s, expected %s\n", Token.show(parser.token), str_token),
  )

def lookahead(parser):
  match Lexer.next(parser.lexer):
    case (None, pos):
      // printf("%s: EOF\n", Pos.show(pos))
      parser.token <- Token.EOF
      parser.pos <- pos
    case (Some(token), pos):
      // printf("%s: %s\n", Pos.show(pos), Token.show(token))
      parser.token <- token
      parser.pos <- pos

def skip(parser, token):
  if parser.token = token:
    lookahead(parser)
  else:
    ()

def parse_token(parser, token):
  if parser.token <> token:
    failwith(expected(parser, Token.show(token)))
  else:
    lookahead(parser)

def parse_non_assoc(parser, get_op, parse_lower):
  var lhs = parse_lower(parser)
  match get_op(parser.token):
    case None:
      lhs
    case Some(str):
      var pos = parser.pos
      lookahead(parser)
      var op = Expr.at(pos, make_op_var(str))
      var rhs = parse_lower(parser)
      Expr.at(pos, Expr.App(Expr.at(pos, Expr.App(op,lhs)),rhs))

def parse_right_assoc(parser, get_op, parse_lower):
  var lhs = parse_lower(parser)
  match get_op(parser.token):
    case None:
      lhs
    case Some(str):
      var pos = parser.pos
      lookahead(parser)
      var op = Expr.at(pos, make_op_var(str))
      var rhs = parse_right_assoc(parser, get_op, parse_lower)
      Expr.at(pos, Expr.App(Expr.at(pos, Expr.App(op,lhs)),rhs))

def parse_left_assoc(parser, get_op, parse_lower):
  var lhs = parse_lower(parser)
  def loop(lhs):
    match get_op(parser.token):
      case None:
        lhs
      case Some(str):
        var pos = parser.pos
        lookahead(parser)
        var op = Expr.at(pos, make_op_var(str))
        var rhs = parse_lower(parser)
        loop(Expr.at(pos, Expr.App(Expr.at(pos, Expr.App(op,lhs)),rhs)))
  loop(lhs)

def parse_elems(parser, sep_or_term, parse_elem):
  def loop(elems):
    match sep_or_term(parser.token):
      case Term:
        lookahead(parser)
        List.rev(elems)
      case _:
        var elem = parse_elem(parser)
        match sep_or_term(parser.token):
          case Term:
            lookahead(parser)
            List.rev(elem::elems)
          case Sep:
            lookahead(parser)
            loop(elem::elems)
          case Neither:
            failwith(expected(parser, "separator or terminator"))
  loop([])

def comma_or_rparen(token):
  match token:
    case Token.Reserved(","): Sep
    case Token.Reserved(")"): Term
    case _: Neither

def semi_or_rbracket(token):
  match token:
    case Token.Reserved(";"): Sep
    case Token.Reserved("]"): Term
    case _: Neither

def semi_or_newline_or_undent(token):
  match token:
    case Token.Reserved(";"): Sep
    case Token.Newline: Sep
    case Token.Undent: Term
    case _: Neither

def semi_or_rbrace(token):
  match token:
    case Token.Reserved(";"): Sep
    case Token.Reserved("}"): Term
    case _: Neither

def parse_indented_elems(parser, parse_elem):
  parse_elems(parser, semi_or_newline_or_undent, parse_elem)

def parse_braced_elems(parser, parse_elem):
  parse_elems(parser, semi_or_rbrace, parse_elem)

def parse_block_like_elems(parser, parse_elem):
  match parser.token:
    case Token.Reserved(":"):
      Lexer.indent(parser.lexer)
      lookahead(parser)
      parse_indented_elems(parser, parse_elem)
    case Token.Reserved("{"):
      lookahead(parser)
      parse_braced_elems(parser, parse_elem)
    case _:
      failwith(expected(parser, "':' or '{'"))

def parse_literal(parser):
  match parser.token:
    case Token.Int(n):
      lookahead(parser)
      Literal.Int(n)
    case Token.String(str):
      lookahead(parser)
      Literal.String(str)
    case Token.Char(str):
      lookahead(parser)
      Literal.Char(str)
    case Token.Reserved("true"):
      lookahead(parser)
      Literal.Bool(true)
    case Token.Reserved("false"):
      lookahead(parser)
      Literal.Bool(false)
    case _:
      failwith(expected(parser, "literal"))

def parse_capid(parser):
  match parser.token:
    case Token.CapId(str):
      lookahead(parser)
      str
    case _:
      failwith(expected(parser, "capitalized identifier"))

def parse_lowid(parser):
  match parser.token:
    case Token.LowId(str):
      lookahead(parser)
      str
    case _:
      failwith(expected(parser, "lowercase identifier"))

def parse_op(parser):
  parse_token(parser, Token.Reserved("("))
  if parser.token = Token.Reserved("["):
    lookahead(parser)
    parse_token(parser, Token.Reserved("]"))
    parse_token(parser, Token.Reserved(")"))
    "[]"
  else:
  match Token.get_op(parser.token):
    case Some(str):
      lookahead(parser)
      parse_token(parser, Token.Reserved(")"))
      str
    case None:
      failwith(expected(parser, "operator"))

def parse_val_name(parser):
  match parser.token:
    case Token.LowId(_):
      Names.Id(parse_lowid(parser))
    case Token.Reserved("$"):
      lookahead(parser)
      Names.Op(parse_op(parser))
    case _:
      failwith(expected(parser, "identifier"))

def parse_ctor_name(parser):
  match parser.token:
    case Token.CapId(_):
      Names.Id(parse_capid(parser))
    case Token.Reserved("$"):
      lookahead(parser)
      Names.Op(parse_op(parser))
    case _:
      failwith(expected(parser, "identifier"))

def parse_val_path(parser, mod_names):
  match parser.token:
    case Token.LowId(_) | Token.Reserved("$"):
      var val_name = parse_val_name(parser)
      (List.rev(mod_names), val_name)
    case Token.CapId(_):
      var capid = parse_capid(parser)
      parse_token(parser, Token.Reserved("."))
      parse_val_path(parser, capid::mod_names)
    case _:
      failwith(expected(parser, "identifier"))
  
def parse_ctor(parser, mod_names):
  match parser.token:
    case Token.Reserved("$"):
      var ctor_name = parse_ctor_name(parser)
      (List.rev(mod_names), ctor_name)
    case Token.CapId(_):
      var capid = parse_capid(parser)
      if parser.token = Token.Reserved("."):
        lookahead(parser)
        parse_ctor(parser, capid::mod_names)
      else:
        (List.rev(mod_names), Names.Id(capid))
    case _:
      failwith(expected(parser, "capitalized identifier"))
  
def parse_mod_path(parser, mod_names):
  var capid = parse_capid(parser)
  if parser.token = Token.Reserved("."):
    lookahead(parser)
    parse_mod_path(parser, capid::mod_names)
  else:
    List.rev(capid::mod_names)

// BEGIN rec: def parse_type

rec:  
  def parse_type(parser):
    parse_fun_type(parser)
  
  def parse_fun_type(parser):
    var lhs = parse_tuple_type(parser)
    match parser.token:
      case Token.AddOp("->"):
        var pos = parser.pos
        lookahead(parser)
        var rhs = parse_fun_type(parser)
        TypeExpr.at(pos, TypeExpr.Fun(lhs, rhs))
      case _:
        lhs

  def parse_tuple_type(parser):
    var t = parse_atomic_type(parser)
    def loop(ts):
      match parser.token:
        case Token.MulOp("*"):
          lookahead(parser)
          var t = parse_atomic_type(parser)
          loop(t::ts)
        case _:
          List.rev(ts)
    match parser.token:
      case Token.MulOp("*"):
        var pos = parser.pos
        TypeExpr.at(pos, TypeExpr.Tuple(loop([t])))
      case _:
        t
  
  def parse_atomic_type(parser):
    match parser.token:
      case Token.LowId(_) | Token.CapId(_):
        var pos = parser.pos
        var typector = parse_typector(parser, [])
        if parser.token = Token.Reserved("("):
          lookahead(parser)
          var args = parse_elems(parser, comma_or_rparen, parse_type)
          TypeExpr.at(pos, TypeExpr.App(typector, args))
        else:
          TypeExpr.at(pos, TypeExpr.Con(typector))
      case Token.Reserved("("):
        lookahead(parser)
        var t = parse_type(parser)
        parse_token(parser, Token.Reserved(")"))
        t
      case Token.Reserved("`"):
        parse_type_var(parser)
      case _:
        failwith(expected(parser, "type"))
  
  def parse_typector(parser, mod_names):
    match parser.token:
      case Token.LowId(_):
        var typector_name = parse_lowid(parser)
        (List.rev(mod_names), typector_name)
      case Token.CapId(_):
        var capid = parse_capid(parser)
        parse_token(parser, Token.Reserved("."))
        parse_typector(parser, capid::mod_names)
      case _:
        failwith(expected(parser, "identifier"))

  def parse_type_var(parser):
    var pos = parser.pos
    parse_token(parser, Token.Reserved("`"))
    TypeExpr.at(pos, TypeExpr.Var(parse_lowid(parser)))

  def parse_type_params(parser):
    if parser.token = Token.Reserved("("):
      lookahead(parser)
      parse_elems(parser, comma_or_rparen, parse_type_var)
    else:
      []

// END rec: def parse_type

// BEGIN rec: def parse_pattern

rec:  
  def parse_pattern(parser):
    parse_as_pattern(parser)

  def parse_as_pattern(parser):
    var pat = parse_or_pattern(parser)
    if parser.token = Token.Reserved("as"):
      var pos = parser.pos
      lookahead(parser)
      var name = parse_val_name(parser)
      Pattern.at(pos, Pattern.As(pat, name))
    else:
      pat
  
  def parse_or_pattern(parser):
    var lhs = parse_cons_pattern(parser)
    def loop(lhs):
      if parser.token = Token.CmpOp("|"):
        var pos = parser.pos
        lookahead(parser)
        var rhs = parse_cons_pattern(parser)
        loop(Pattern.at(pos, Pattern.Or(lhs, rhs)))
      else:
        lhs
    loop(lhs)
  
  def parse_cons_pattern(parser):
    var lhs = parse_atomic_pattern(parser)
    if parser.token = Token.ConsOp("::"):
      var pos = parser.pos
      lookahead(parser)
      var rhs = parse_cons_pattern(parser)
      make_cons_pattern(pos, lhs, rhs)
    else:
      lhs
  
  def parse_atomic_pattern(parser):
    match parser.token:
      case Token.Int(_) | Token.String(_) | Token.Char(_) |
           Token.Reserved("true") | Token.Reserved("false"):
        var pos = parser.pos
        var lit = parse_literal(parser)
        Pattern.at(pos, Pattern.Con(lit))
      case Token.LowId("_"):
        var pos = parser.pos
        lookahead(parser)
        Pattern.at(pos, Pattern.WildCard)
      case Token.LowId(_):
        var pos = parser.pos
        var name = parse_val_name(parser)
        Pattern.at(pos, Pattern.Var(name))
      case Token.CapId(_):
        parse_variant_pattern(parser)
      case Token.Reserved("["):
        var pos = parser.pos
        lookahead(parser)
        parse_list_pattern(parser, pos)
      case Token.Reserved("{"):
        var pos = parser.pos
        lookahead(parser)
        parse_record_pattern(parser, pos)
      case Token.Reserved("("):
        parse_parens_pattern(parser)
      case _:
        failwith(expected(parser, "pattern"))
  
  def parse_variant_pattern(parser):
    var pos = parser.pos
    var ctor = parse_ctor(parser, [])
    if parser.token = Token.Reserved("("):
      var pos_tuple = parser.pos
      var pat = match parse_params(parser):
        case []:
          assert(false)
        case [pat]:
          pat
        case pat_list:
          Pattern.at(pos_tuple, Pattern.Tuple(pat_list))
      Pattern.at(pos, Pattern.Ctor(ctor, Some(pat)))
    else:
      Pattern.at(pos, Pattern.Ctor(ctor, None))
    
  def parse_list_pattern(parser, pos):
    var list = parse_elems(parser, semi_or_rbracket, parse_pattern)
    List.fold_right(make_cons_pattern(pos), list, Pattern.at(pos, nil_pattern))
  
  def parse_record_pattern(parser, pos):
    Pattern.at(pos, Pattern.Record(parse_braced_elems(parser, parse_field_pattern)))
  
  def parse_field_pattern(parser):
    var field_name = parse_val_path(parser, [])
    if parser.token = Token.Reserved("="):
      lookahead(parser)
      var pattern = parse_pattern(parser)
      (field_name, Some(pattern))
    else:
      (field_name, None)
      
  def parse_parens_pattern(parser):
    var pos = parser.pos
    match parse_params(parser):
      case []:
        assert(false)
      case [pat]:
        pat
      case pat_list:
        Pattern.at(pos, Pattern.Tuple(pat_list))
  
  def parse_params(parser):
    var pos = parser.pos
    parse_token(parser, Token.Reserved("("))
    if parser.token = Token.Reserved(")"):
      lookahead(parser)
      [Pattern.at(pos, unit_pattern)]
    else:
      parse_pattern_list(parser)
  
  def parse_pattern_list(parser):
    parse_elems(parser, comma_or_rparen, parse_pattern)

// END rec: def parse_pattern

// BEGIN rec: def parse_expr

rec:  
  def parse_expr(parser):
    parse_assign_expr(parser)
  
  def parse_assign_expr(parser):
    var lhs = parse_or_expr(parser)
    match parser.token:
      case Token.AssignOp(":="):
        var pos = parser.pos
        lookahead(parser)
        var op = Expr.at(pos, make_op_var(":="))
        var rhs = parse_assign_expr(parser)
        Expr.at(pos, Expr.App(Expr.at(pos, Expr.App(op,lhs)),rhs))
      case _:
        lhs
  
  def parse_or_expr(parser):
    var lhs = parse_and_expr(parser)
    match parser.token:
      case Token.OrOp("||"):
        var pos = parser.pos
        lookahead(parser)
        var rhs = parse_or_expr(parser)
        Expr.at(pos, Expr.Or(lhs, rhs))
      case _:
        lhs
  
  def parse_and_expr(parser):
    var lhs = parse_cmp_expr(parser)
    match parser.token:
      case Token.AndOp("&&"):
        var pos = parser.pos
        lookahead(parser)
        var rhs = parse_and_expr(parser)
        Expr.at(pos, Expr.And(lhs, rhs))
      case _:
        lhs
  
  def parse_cmp_expr(parser):
    def get_op(token):
      match token:
        case Token.CmpOp(str):
          Some(str)
        case _:
          None
    parse_non_assoc(parser, get_op, parse_cons_expr)
  
  def parse_cons_expr(parser):
    var lhs = parse_add_expr(parser)
    match parser.token:
      case Token.ConsOp(str):
        var pos = parser.pos
        lookahead(parser)
        var rhs = parse_cons_expr(parser)
        Expr.at(pos, Expr.Ctor(cons_op, Some(Expr.at(pos, Expr.Tuple([lhs;rhs])))))
      case _:
        lhs
  
  def parse_add_expr(parser):
    def get_op(token):
      match token:
        case Token.AddOp(str):
          Some(str)
        case _:
          None
    parse_left_assoc(parser, get_op, parse_mul_expr)
  
  def parse_mul_expr(parser):
    def get_op(token):
      match token:
        case Token.MulOp(str):
          Some(str)
        case _:
          None
    parse_left_assoc(parser, get_op, parse_pow_expr)
  
  def parse_pow_expr(parser):
    def get_op(token):
      match token:
        case Token.PowOp(str):
          Some(str)
        case _:
          None
    parse_right_assoc(parser, get_op, parse_unary_expr)
  
  def parse_unary_expr(parser):
    match parser.token:
      case Token.AddOp("-"):
        var pos = parser.pos
        lookahead(parser)
        var expr = parse_unary_expr(parser)
        Expr.at(pos, Expr.App(Expr.at(pos, make_op_var("~-")),expr))
      case Token.AddOp("+"):
        var pos = parser.pos
        lookahead(parser)
        var expr = parse_unary_expr(parser)
        Expr.at(pos, Expr.App(Expr.at(pos, make_op_var("~+")),expr))
      case Token.CmpOp("!"):
        var pos = parser.pos
        lookahead(parser)
        var expr = parse_unary_expr(parser)
        Expr.at(pos, Expr.App(Expr.at(pos, make_op_var("!")),expr))
      case _:
        parse_dot_expr(parser)
        
  def parse_dot_expr(parser):
    var expr = parse_prim_expr(parser)
    def loop(expr):
      match parser.token:
        case Token.Reserved("."):
          var pos = parser.pos
          lookahead(parser)
          match parser.token:
            case Token.Reserved("{"):
              lookahead(parser)
              var raw = Expr.Update(expr, parse_braced_elems(parser, parse_field_def))
              loop(Expr.at(pos, raw))
            case _:
              var path = parse_val_path(parser, [])
              match parser.token:
                case Token.AssignOp("<-"):
                  lookahead(parser)
                  var rhs = parse_expr(parser)
                  Expr.at(pos, Expr.Assign(expr, path, rhs))
                case _:
                  loop(Expr.at(pos, Expr.Field(expr, path)))
        case _:
          expr
    loop(expr)

  def parse_prim_expr(parser):
    var fun_expr = parse_atomic_expr(parser)
    def loop(fun_expr):
      match parser.token:
        case Token.Reserved("("):
          var pos = parser.pos
          lookahead(parser)
          var arg_exprs = parse_args(parser, pos)
          loop(make_app(pos, fun_expr, arg_exprs))
        case Token.Reserved("^"):
          var pos = parser.pos
          lookahead(parser)
          var arg_expr = parse_abs(parser, pos)
          loop(Expr.at(pos, Expr.App(fun_expr, arg_expr)))
        case _:
          fun_expr
    loop(fun_expr)
  
  def parse_atomic_expr(parser):
    match parser.token:
      case Token.Int(_) | Token.String(_) | Token.Char(_) |
           Token.Reserved("true") | Token.Reserved("false"):
        var pos = parser.pos
        var lit = parse_literal(parser)
        Expr.at(pos, Expr.Con(lit))
      case Token.LowId(_) | Token.CapId(_) | Token.Reserved("$"):
        parse_var_or_ctor_app(parser, [])
      case Token.Reserved("^"):
        var pos = parser.pos
        lookahead(parser)
        parse_abs(parser, pos)
      case Token.Reserved("["):
        var pos = parser.pos
        lookahead(parser)
        parse_list(parser, pos)
      case Token.Reserved("("):
        var pos = parser.pos
        lookahead(parser)
        parse_parens(parser, pos)
      case Token.Reserved("{"):
        var pos = parser.pos
        lookahead(parser)
        parse_record(parser, pos)
      case Token.Reserved("if"):
        var pos = parser.pos
        lookahead(parser)
        parse_if_expr(parser, pos)
      case Token.Reserved("match"):
        var pos = parser.pos
        lookahead(parser)
        parse_match_expr(parser, pos)
      case Token.Reserved("try"):
        var pos = parser.pos
        lookahead(parser)
        parse_try_expr(parser, pos)
      case _:
        failwith(expected(parser, "expression"))
  
  def parse_var_or_ctor_app(parser, mod_names):
    match parser.token:
      case Token.LowId(_) | Token.Reserved("$"):
        var pos = parser.pos
        var val_name = parse_val_name(parser)
        Expr.at(pos, Expr.Var((List.rev(mod_names), val_name), ref()))
      case Token.CapId(_):
        var pos = parser.pos
        var capid = parse_capid(parser)
        if parser.token = Token.Reserved("."):
          lookahead(parser)
          parse_var_or_ctor_app(parser, capid::mod_names)
        else:
          var ctor = (List.rev(mod_names), Names.Id(capid))
          parse_ctor_app(parser, pos, ctor)
      case _:
        failwith(expected(parser, "identifier"))
  
  def parse_ctor_app(parser, pos, ctor):
    match parser.token:
      case Token.Reserved("("):
        var pos_paren = parser.pos
        lookahead(parser)
        var arg_expr = match parse_args(parser, pos_paren):
          case []:
            assert(false)
          case [arg_expr]:
            arg_expr
          case arg_exprs:
            Expr.at(pos_paren, Expr.Tuple(arg_exprs))
        Expr.at(pos, Expr.Ctor(ctor, Some(arg_expr)))
      case Token.Reserved("^"):
        lookahead(parser)
        var arg_expr = parse_abs(parser, pos)
        Expr.at(pos, Expr.Ctor(ctor, Some(arg_expr)))
      case _:
        Expr.at(pos, Expr.Ctor(ctor, None))
  
  def parse_abs(parser, pos):
    var params = parse_params(parser)
    var body_expr = parse_block(parser)
    make_abs(pos, params, body_expr)
  
  def parse_block(parser):
    match parser.token:
      case Token.Reserved(":"):
        Lexer.indent(parser.lexer)
        lookahead(parser)
        parse_indented_block(parser)
      case Token.Reserved("{"):
        lookahead(parser)
        parse_braced_block(parser)
      case _:
        failwith(expected(parser, "':' or '{'"))
  
  def parse_indented_block(parser):
    var expr = parse_block_elem(parser, semi_or_newline_or_undent)
    parse_token(parser, Token.Undent)
    expr
  
  def parse_braced_block(parser):
    var expr = parse_block_elem(parser, semi_or_rbrace)
    parse_token(parser, Token.Reserved("}"))
    expr
    
  def parse_block_elem(parser, sep_or_term):
    match parser.token:
      case Token.Reserved("var"):
        var pos = parser.pos
        lookahead(parser)
        var (val_name,val_expr) = parse_let_val(parser)
        parse_sep(parser, sep_or_term)
        var cont_expr = parse_block_elem(parser, sep_or_term)
        Expr.at(pos, Expr.LetVal(val_name, val_expr, cont_expr))
      case Token.Reserved("def"):
        var pos = parser.pos
        var defs = [parse_let_fun(parser)]
        parse_sep(parser, sep_or_term)
        var cont_expr = parse_block_elem(parser, sep_or_term)
        Expr.at(pos, Expr.LetFun(defs, cont_expr))
      case Token.Reserved("rec"):
        var pos = parser.pos
        lookahead(parser)
        var defs = parse_block_like_elems(parser, parse_let_fun)
        parse_sep(parser, sep_or_term)
        var cont_expr = parse_block_elem(parser, sep_or_term)
        Expr.at(pos, Expr.LetFun(defs, cont_expr))
      case _:
        var lhs = parse_expr(parser)
        match sep_or_term(parser.token):
          case Sep:
            var pos = parser.pos
            lookahead(parser)
            match sep_or_term(parser.token):
              case Term:
                lhs
              case _:
                var rhs = parse_block_elem(parser, sep_or_term)
                Expr.at(pos, Expr.Seq(lhs, rhs))
          case _:
            lhs
  
  def parse_let_val(parser):
    var val_pat = parse_pattern(parser)
    parse_token(parser, Token.CmpOp("="))
    var val_expr = parse_expr(parser)
    (val_pat,val_expr)
    
  def parse_let_fun(parser):
    parse_token(parser, Token.Reserved("def"))
    var pos = parser.pos
    var fun_name = parse_val_name(parser)
    var params = parse_params(parser)
    var body_expr = parse_block(parser)
    (fun_name, make_abs(pos, params, body_expr), ref())
    
  def parse_sep(parser, sep_or_term):
    match sep_or_term(parser.token):
      case Sep:
        lookahead(parser)
      case _:
        failwith(expected(parser, "separator"))
  
  def parse_list(parser, pos):
    var list = parse_elems(parser, semi_or_rbracket, parse_expr)
    def make_cons(elem, acc):
      Expr.at(pos, Expr.Ctor(cons_op, Some(Expr.at(pos, Expr.Tuple([elem; acc])))))
    List.fold_right(make_cons, list, Expr.at(pos, nil_expr))
  
  def parse_parens(parser, pos):
    match parse_args(parser, pos):
      case []:
        assert(false)
      case [arg_expr]:
        arg_expr
      case arg_exprs:
        Expr.at(pos, Expr.Tuple(arg_exprs))

  def parse_args(parser, pos):
    if parser.token = Token.Reserved(")"):
      lookahead(parser)
      [Expr.at(pos, unit_expr)]
    else:
      parse_expr_list(parser)
  
  def parse_expr_list(parser):
    parse_elems(parser, comma_or_rparen, parse_expr)
  
  def parse_record(parser, pos):
    Expr.at(pos, Expr.Record(parse_braced_elems(parser, parse_field_def)))
  
  def parse_field_def(parser):
    var field_name = parse_val_path(parser, [])
    parse_token(parser, Token.CmpOp("="))
    var expr = parse_expr(parser)
    (field_name, expr)
  
  def parse_if_expr(parser, pos):
    var cond_expr = parse_expr(parser)
    var then_expr = parse_block(parser)
    skip(parser, Token.Newline)
    parse_token(parser, Token.Reserved("else"))
    var else_expr = parse_block(parser)
    Expr.at(pos, Expr.If(cond_expr,then_expr,else_expr))
    
  def parse_match_expr(parser, pos):
    var target_expr = parse_expr(parser)
    var cases = parse_block_like_elems(parser, parse_case)
    Expr.at(pos, Expr.Match(target_expr, cases))
  
  def parse_try_expr(parser, pos):
    var expr = parse_block(parser)
    skip(parser, Token.Newline)
    parse_token(parser, Token.Reserved("with"))
    var cases = parse_block_like_elems(parser, parse_case)
    Expr.at(pos, Expr.Try(expr, cases))

  def parse_case(parser):
    parse_token(parser, Token.Reserved("case"))
    var pat = parse_pattern(parser)
    if parser.token = Token.Reserved("when"):
      lookahead(parser)
      var guard = parse_expr(parser)
      var expr = parse_block(parser)
      (pat,Some(guard),expr)
    else:
      var expr = parse_block(parser)
      (pat,None,expr)

// END rec: def parse_expr

// BEGIN rec: def parse_top

rec:
  def parse_top(parser):
    match parser.token:
      case Token.Reserved("var"):
        var pos = parser.pos
        lookahead(parser)
        parse_top_let_val(parser, pos)
      case Token.Reserved("def"):
        var pos = parser.pos
        Top.at(pos, Top.LetFun([parse_top_let_fun(parser)]))
      case Token.Reserved("type"):
        var pos = parser.pos
        Top.at(pos, Top.Type([parse_top_type_def(parser)]))
      case Token.Reserved("open"):
        var pos = parser.pos
        lookahead(parser)
        parse_top_open(parser, pos)
      case Token.Reserved("exception"):
        var pos = parser.pos
        lookahead(parser)
        Top.at(pos, Top.Exception(parse_exn_decl(parser, pos)))
      case Token.Reserved("rec"):
        var pos = parser.pos
        lookahead(parser)
        parse_top_rec(parser, pos)
      case _:
        var pos = parser.pos
        Top.at(pos, Top.Expr(parse_expr(parser)))

  def parse_top_let_val(parser, pos):
    var val_pat = parse_pattern(parser)
    parse_token(parser, Token.CmpOp("="))
    Top.at(pos, Top.LetVal(val_pat, parse_expr(parser)))

  def parse_top_let_fun(parser):
    parse_token(parser, Token.Reserved("def"))
    var pos = parser.pos
    var fun_name = parse_val_name(parser)
    var params = parse_params(parser)
    var body_expr = parse_block(parser)
    (fun_name, make_abs(pos, params, body_expr), ref())
  
  def parse_top_open(parser, pos):
    var mod_path = parse_mod_path(parser, [])
    Top.at(pos, Top.Open(mod_path))

  def parse_exn_decl(parser, pos):
    var exn_name = Names.Id(parse_capid(parser))
    var ret_type_expr = TypeExpr.at(pos, exn_type_expr)
    if parser.token = Token.Reserved("("):
      lookahead(parser)
      var t = parse_type(parser)
      parse_token(parser, Token.Reserved(")"))
      var ctor_type_expr = TypeExpr.at(pos, TypeExpr.Fun(t, ret_type_expr))
      (exn_name, Some(t), ctor_type_expr)
    else:
      (exn_name, None, ret_type_expr)

  def parse_top_rec(parser, pos):
    match parser.token:
      case Token.Reserved(":"):
        Lexer.indent(parser.lexer)
        lookahead(parser)
        match parser.token:
          case Token.Reserved("type"):
            Top.at(pos, Top.Type(parse_indented_elems(parser, parse_top_type_def)))
          case _:
            Top.at(pos, Top.LetFun(parse_indented_elems(parser, parse_top_let_fun)))
      case Token.Reserved("{"):
        lookahead(parser)
        match parser.token:
          case Token.Reserved("type"):
            Top.at(pos, Top.Type(parse_braced_elems(parser, parse_top_type_def)))
          case _:
            Top.at(pos, Top.LetFun(parse_braced_elems(parser, parse_top_let_fun)))
      case _:
        failwith(expected(parser, "':' or '{'"))

  def parse_top_type_def(parser):
    match parse_type_def(parser):
      case Left(typector_name, type_params):
        failwith(expected(parser, "'=' or ':' or '{'"))
      case Right(type_def):
        type_def

  def parse_type_def(parser):
    parse_token(parser, Token.Reserved("type"))
    var pos = parser.pos
    var typector_name = parse_lowid(parser)
    var type_params = parse_type_params(parser)
    var defined_type = if List.length(type_params) = 0:
      TypeExpr.at(pos, TypeExpr.Con([],typector_name))
    else:
      TypeExpr.at(pos, TypeExpr.App(([],typector_name), type_params))
    match parser.token:
      case Token.CmpOp("="):
        lookahead(parser)
        var t = parse_type(parser)
        var conv_fun_type_expr = TypeExpr.at(pos, TypeExpr.Fun(defined_type, t))
        Right(TypeDef.Abbrev(typector_name, type_params, t, conv_fun_type_expr))
      case Token.Reserved(":") | Token.Reserved("{"):
        var type_info = parse_type_info(parser, defined_type)
        Right(TypeDef.Repr(typector_name, type_params, type_info))
      case _:
        Left(typector_name, type_params)
  
  def parse_type_info(parser, defined_type):
    match parser.token:
      case Token.Reserved(":"):
        Lexer.indent(parser.lexer)
        lookahead(parser)
        match parser.token:
          case Token.Reserved("def"):
            TypeInfo.Variant(parse_indented_elems(parser, parse_ctor_decl(defined_type)))
          case _:
            TypeInfo.Record(parse_indented_elems(parser, parse_field_decl(defined_type)))
      case Token.Reserved("{"):
        lookahead(parser)
        match parser.token:
          case Token.Reserved("def"):
            TypeInfo.Variant(parse_braced_elems(parser, parse_ctor_decl(defined_type)))
          case _:
            TypeInfo.Record(parse_braced_elems(parser, parse_field_decl(defined_type)))
      case _:
        failwith(expected(parser, "':' or '{'"))
  
  def parse_ctor_decl(ret_type, parser):
    var pos = parser.pos
    parse_token(parser, Token.Reserved("def"))
    var ctor_name = parse_ctor_name(parser)
    if parser.token = Token.Reserved("("):
      lookahead(parser)
      var param_type = parse_type(parser)
      parse_token(parser, Token.Reserved(")"))
      (ctor_name, Some(param_type), TypeExpr.at(pos, TypeExpr.Fun(param_type, ret_type)))
    else:
      (ctor_name, None, ret_type)
  
  def parse_field_decl(record_type, parser):
    var pos = parser.pos
    var is_mutable = (parser.token = Token.Reserved("mutable"))
    if is_mutable:
      lookahead(parser)
    else:
      ()
    var field_name = parse_val_name(parser)
    parse_token(parser, Token.Reserved(":"))
    var t = parse_type(parser)
    (is_mutable, field_name, t, TypeExpr.at(pos, TypeExpr.Fun(record_type, t)))

// END rec: def parse_top

def parse_decl_expr(parser):
  match parser.token:
    case Token.Reserved("val"):
      lookahead(parser)
      var name = parse_val_name(parser)
      parse_token(parser, Token.Reserved(":"))
      var type_expr = parse_type(parser)
      DeclExpr.Val(name, type_expr)
    case Token.Reserved("type"):
      match parse_type_def(parser):
      case Left(typector_name, type_params):
        DeclExpr.AbstrType(typector_name, List.length(type_params))
      case Right(type_def):
        DeclExpr.ConcrType([type_def])
    case Token.Reserved("exception"):
      var pos = parser.pos
      lookahead(parser)
      DeclExpr.Exception(parse_exn_decl(parser, pos))
    case _:
      failwith(expected(parser, "declaration"))

def parse_decl_stmt(parser):
  var decl_expr = parse_decl_expr(parser)
  match parser.token:
    case Token.EOF | Token.Newline | Token.Reserved(";"):
      decl_expr
    case _:
      failwith(expected(parser, "newline or ';'"))

def parse_decl(parser):
  lookahead(parser)
  match parser.token:
    case Token.EOF:
      None
    case _:
      Some(parse_decl_stmt(parser))

def parse_stmt(parser):
  var expr = parse_top(parser)
  match parser.token:
    case Token.EOF | Token.Newline | Token.Reserved(";"):
      expr
    case _:
      failwith(expected(parser, "newline or ';'"))
  
def parse(parser):
  lookahead(parser)
  match parser.token:
    case Token.EOF:
      None
    case _:
      Some(parse_stmt(parser))
