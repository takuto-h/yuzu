
type t:
  mods : list(Module.t)
  asp : list(Names.val_name * Type.t)
  
def create(): {
  mods = [];
  asp = [];
}

var int_type = Type.Con([], "int")
var string_type = Type.Con([], "string")
var char_type = Type.Con([], "char")

def infer_literal(lit):
  match lit:
    case Literal.Int(_):
      int_type
    case Literal.String(_):
      string_type
    case Literal.Char(_):
      char_type

def infer(inf, expr):
  match expr:
    case Expr.Con(lit):
      infer_literal(lit)
    case Expr.Var([], name):
      try:
        List.assoc(name, inf.asp)
      with:
        case Not_found:
          raise(Not_found)
      