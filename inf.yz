
open Printf

type require_argument = bool
type mutability = bool

type t:
  mods : list(Names.mod_name * Module.t)
  curr_mod : Module.t
  mod_name : Names.mod_name
  opens : list(Names.mod_name * Names.mod_path)
  let_level : int

var default_opens = [("Pervasives", [])]

def create(mods): {
  mods = mods;
  curr_mod = Module.make([], [], [], [], [], []);
  mod_name = "Dummy";
  opens = default_opens;
  let_level = 0;
}

def incr_let_level(inf): inf.{
  let_level = inf.let_level + 1;
}

var unit_type = Type.Con(["Pervasives"], "unit")
var int_type = Type.Con(["Pervasives"], "int")
var string_type = Type.Con(["Pervasives"], "string")
var char_type = Type.Con(["Pervasives"], "char")
var bool_type = Type.Con(["Pervasives"], "bool")
var exn_type = Type.Con(["Pervasives"], "exn")

def unbound_variable(pos, path):
  Pos.show_error(pos, sprintf("unbound variable: %s\n", Names.show_val_path(path)))

def unbound_constructor(pos, ctor):
  Pos.show_error(pos, sprintf("unbound constructor: %s\n", Names.show_ctor(ctor)))

def unbound_field_label(pos, path):
  Pos.show_error(pos, sprintf("unbound field label: %s\n", Names.show_val_path(path)))

def unbound_type_constructor(pos, typector):
  Pos.show_error(pos, sprintf("unbound type constructor: %s\n", Names.show_typector(typector)))

def unbound_type_class(pos, typeclass):
  Pos.show_error(pos, sprintf("unbound type class: %s\n", Names.show_typeclass(typeclass)))

def invalid_application(pos, fun_type, arg_type, t1, t2):
  var shower = Type.create_shower(0)
  sprintf(
    "%s%s%s",
    Pos.show_error(
      pos,
      sprintf(
        "invalid application\n%s%s",
        sprintf("function type: %s\n", Type.show(shower, fun_type)),
        sprintf("argument type: %s\n", Type.show(shower, arg_type)),
      ),
    ),
    Type.show_origin(shower, "function type", t1),
    Type.show_origin(shower, "argument type", t2),
  )

def wrong_number_of_arguments(pos, got, req):
  Pos.show_error(pos, sprintf("wrong number of arguments (%d for %d)\n", got, req))

def invalid_if_expr(pos, then_type, else_type, t1, t2):
  var shower = Type.create_shower(0)
  sprintf(
    "%s%s%s",
    Pos.show_error(
      pos,
      sprintf(
        "invalid if expression\n%s%s",
        sprintf("then-clause type: %s\n", Type.show(shower, then_type)),
        sprintf("else-clause type: %s\n", Type.show(shower, else_type)),
      ),
    ),
    Type.show_origin(shower, "then-clause type", t1),
    Type.show_origin(shower, "else-clause type", t2),
  )

def required(pos, req_type, got_type, t1, t2):
  var shower = Type.create_shower(0)
  sprintf(
    "%s%s%s",
    Pos.show_error(
      pos,
      sprintf(
        "'%s' required, but got '%s'\n",
        Type.show(shower, req_type), Type.show(shower, got_type)
      )
    ),
    Type.show_origin(shower, "required type", t1),
    Type.show_origin(shower, "got type", t2),
  )

def inconsistent_types(pos, type1, type2, t1, t2):
  var shower = Type.create_shower(0)
  sprintf(
    "%s%s%s",
    Pos.show_error(
      pos,
      sprintf(
        "inconsistent types\n%s%s",
        sprintf("type of lhs: %s\n", Type.show(shower, type1)),
        sprintf("type of rhs: %s\n", Type.show(shower, type2))
      )
    ),
    Type.show_origin(shower, "type of lhs", t1),
    Type.show_origin(shower, "type of rhs", t2),
  )

def inconsistent_var_occurrence(pos):
  Pos.show_error(pos, "inconsistent variable occurrence\n")

def field_not_mutable(pos, path):
  Pos.show_error(pos, sprintf("field not mutable: %s\n", Names.show_val_path(path)))

def instance_not_found(pos, tc, t):
  var shower = Type.create_shower(0)
  sprintf(
    "%s%s",
    Pos.show_error(
      pos,
      sprintf(
        "instance not found: %s(%s)\n", Names.show_typeclass(tc), Type.show(shower, t)
      )
    ),
    Type.show_origin(shower, "constraint", t)
  )

def search_mods(search_mod, mods, mod_name, mod_path, name):
  var modl = List.assoc(mod_name, mods)
  search_mod(modl, mod_path, name)

def search_opens(search_mod, mods, opens, name):
  match opens:
    case []:
      raise(Not_found)
    case (mod_name, mod_path)::opens:
      try:
        search_mods(search_mod, mods, mod_name, mod_path, name)
      with:
        case Not_found:
          search_opens(search_mod, mods, opens, name)

def search_alist(search_mod, alist, inf, path):
  match path:
    case ([], name):
      try:
        List.assoc(name, alist)
      with:
        case Not_found:
          search_opens(search_mod, inf.mods, inf.opens, name)
    case (mod_name::mod_path, name):
      search_mods(search_mod, inf.mods, mod_name, mod_path, name)

def search_asp(inf, path):
  search_alist(Module.search_asp, inf.curr_mod.Module.asp, inf, path)

def search_ctors(inf, ctor):
  search_alist(Module.search_ctors, inf.curr_mod.Module.ctors, inf, ctor)

def search_fields(inf, path):
  search_alist(Module.search_fields, inf.curr_mod.Module.fields, inf, path)

def search_typectors(inf, typector):
  search_alist(Module.search_typectors, inf.curr_mod.Module.typectors, inf, typector)

def search_instances(inf, typeclass):
  search_alist(Module.search_instances, inf.curr_mod.Module.instances, inf, typeclass)

def add_asp(inf, name, scm):
  inf.{curr_mod = inf.curr_mod.{Module.asp = (name, scm)::inf.curr_mod.Module.asp}}

def add_ctor(inf, name, info):
  inf.{curr_mod = inf.curr_mod.{Module.ctors = (name, info)::inf.curr_mod.Module.ctors}}

def add_field(inf, name, info):
  inf.{curr_mod = inf.curr_mod.{Module.fields = (name, info)::inf.curr_mod.Module.fields}}

def add_typector(inf, name, info):
  inf.{curr_mod = inf.curr_mod.{Module.typectors = (name, info)::inf.curr_mod.Module.typectors}}

def add_type_var(inf, name):
  var t = Type.make_var(inf.let_level)
  var inf = add_asp(inf, name, Scheme.mono(t))
  (inf, t)

def apply(let_level, pos, fun_type, arg_type):
  var ret_type = Type.make_var(let_level)
  try:
    Type.unify(fun_type, Type.at(None, Type.Fun(arg_type, ret_type)))
  with:
    case Type.Unification_error(t1, t2):
      failwith(invalid_application(pos, fun_type, arg_type, t1, t2))
  ret_type

def require_consistent(pos, type1, type2):
  try:
    Type.unify(type1, type2)
  with:
    case Type.Unification_error(t1, t2):
      failwith(inconsistent_types(pos, type1, type2, t1, t2))

def instantiate(let_level, {Scheme.gen_num;Scheme.preds;Scheme.body}):
  var type_vars = Array.init(gen_num)^(_): Type.make_var(let_level)
  def var_func(t, _, _):
    t
  def gen_func(t, n):
    Array.get(type_vars, n)
  var preds = List.map^((tc, t)){(tc, Type.map(var_func, gen_func, t))}(preds)
  var body = Type.map(var_func, gen_func, body)
  (preds, body)

def generalize(let_level, preds, t):
  var alist_ref = ref([])
  def var_func(t, lv, ref):
    if lv > let_level:
      try:
        List.assq(ref, !alist_ref)
      with:
        case Not_found:
          var gen = Type.at(t.Type.pos, Type.Gen(List.length(!alist_ref)))
          alist_ref := (ref, gen)::!alist_ref
          gen
    else:
      t
  def gen_func(t, _):
    assert(false)
  var preds = List.map^((tc,t)){(tc,Type.map(var_func, gen_func,t))}(preds)
  Scheme.poly(List.length(!alist_ref), preds, Type.map(var_func, gen_func, t))

def infer_literal(lit):
  match lit:
    case Literal.Unit:
      unit_type
    case Literal.Int(_):
      int_type
    case Literal.String(_):
      string_type
    case Literal.Char(_):
      char_type
    case Literal.Bool(_):
      bool_type

def infer_pattern(inf, pat):
  match pat.Pattern.raw:
    case Pattern.WildCard:
      (inf, Type.make_var(inf.let_level), ValNameMap.empty)
    case Pattern.Con(lit):
      (inf, Type.at(Some(pat.Pattern.pos), infer_literal(lit)), ValNameMap.empty)
    case Pattern.Var(name):
      var (inf, t) = add_type_var(inf, name)
      (inf, t, ValNameMap.singleton(name, t))
    case Pattern.Tuple(pats):
      var init = (inf, [], ValNameMap.empty)
      var (inf, ts, map) = YzList.fold_right(pats, init)^(elem, (inf, ts, map1)):
        var (inf, t, map2) = infer_pattern(inf, elem)
        (inf, t::ts, ValNameMap.merge^(_){YzOption.or_}(map1, map2))
      (inf, Type.at(Some(pat.Pattern.pos), Type.Tuple(ts)), map)
    case Pattern.Ctor(ctor, opt_pat):
      try:
        var (req_arg, ctor_scm) = search_ctors(inf, ctor)
        var (preds0, ctor_type) = instantiate(inf.let_level, ctor_scm)
        assert(preds0 = [])
        match (req_arg, opt_pat):
          case (false, None):
            (inf, ctor_type, ValNameMap.empty)
          case (false, Some(pat)):
            failwith(wrong_number_of_arguments(pat.Pattern.pos, 0, 1))
          case (true, None):
            failwith(wrong_number_of_arguments(pat.Pattern.pos, 1, 0))
          case (true, Some(pat)):
            var (inf, param_type, map) = infer_pattern(inf, pat)
            var ret_type = apply(inf.let_level, pat.Pattern.pos, ctor_type, param_type)
            (inf, ret_type, map)
      with:
        case Not_found:
          failwith(unbound_constructor(pat.Pattern.pos, ctor))
    case Pattern.Record(fields):
      var record_type = Type.make_var(inf.let_level)
      var init = (inf, ValNameMap.empty)
      var (inf, map) = YzList.fold_left(init, fields)^((inf, map1), (path, opt_pat)):
        try:
          var (mod_path, name) = path
          var (is_mutable, access_fun_scm) = search_fields(inf, path)
          var (preds0, access_fun_type) = instantiate(inf.let_level, access_fun_scm)
          assert(preds0 = [])
          ignore(apply(inf.let_level, pat.Pattern.pos, access_fun_type, record_type))
          match opt_pat:
            case None:
              var (inf, t) = add_type_var(inf, name)
              (inf, ValNameMap.add(name, t, map1))
            case Some(pat):
              var (inf, t, map2) = infer_pattern(inf, pat)
              (inf, ValNameMap.merge^(_){YzOption.or_}(map1, map2))
        with:
          case Not_found:
            failwith(unbound_field_label(pat.Pattern.pos, path))
      (inf, record_type, map)
    case Pattern.As(pat,name):
      var (inf, t, map) = infer_pattern(inf, pat)
      var inf = add_asp(inf, name, Scheme.mono(t))
      (inf, t, ValNameMap.add(name, t, map))
    case Pattern.Or(lhs,rhs):
      var (lhs_inf, lhs_type, lhs_map) = infer_pattern(inf, lhs)
      var (rhs_inf, rhs_type, rhs_map) = infer_pattern(inf, rhs)
      if not(ValNameMap.equal_keys(lhs_map, rhs_map)):
        failwith(inconsistent_var_occurrence(pat.Pattern.pos))
      else:
        require_consistent(pat.Pattern.pos, lhs_type, rhs_type)
        (rhs_inf, rhs_type, rhs_map)

def solve_constraints(inf, pos, cstrs):
  YzList.fold_left([], cstrs)^(preds, ((tc, t), inst_ref)):
    try:
      var insts = search_instances(inf, tc)
      match t.Type.raw:
        case Type.Con(typector) | Type.App(typector,_):
          try:
            var inst = List.assoc(typector, insts)
            inst_ref := inst
            preds
          with:
            case Not_found:
              failwith(instance_not_found(pos, tc, t))
        case Type.Tuple(_) | Type.Fun(_,_):
          failwith(instance_not_found(pos, tc, t))
        case Type.Var(_,_):
          (tc, t)::preds
        case Type.Gen(_):
          assert(false)
    with:
      case Not_found:
        failwith(unbound_type_class(pos, tc))

rec:
  def infer_expr(inf, cstrs, expr):
    match expr.Expr.raw:
      case Expr.Con(lit):
        (Type.at(Some(expr.Expr.pos), infer_literal(lit)), cstrs)
      case Expr.Var(path, insts):
        try:
          var scm = search_asp(inf, path)
          var (preds, t) = instantiate(inf.let_level, scm)
          var (insts, cstrs) = YzList.fold_right(preds, ([], cstrs))^(pred, (insts, cstrs)):
            var inst = ref()
            var cstr = (pred, inst)
            (inst::insts, cstr::cstrs)
          (t, cstrs)
        with:
          case Not_found:
            failwith(unbound_variable(expr.Expr.pos, path))
      case Expr.Abs(pat, body_expr):
        var (inf, pat_type, map) = infer_pattern(inf, pat)
        var (body_type, cstrs) = infer_expr(inf, cstrs, body_expr)
        (Type.at(Some(expr.Expr.pos), Type.Fun(pat_type, body_type)), cstrs)
      case Expr.App(fun_expr, arg_expr):
        var (fun_type, cstrs) = infer_expr(inf, cstrs, fun_expr)
        var (arg_type, cstrs) = infer_expr(inf, cstrs, arg_expr)
        (apply(inf.let_level, expr.Expr.pos, fun_type, arg_type), cstrs)
      case Expr.Ctor(ctor, opt_arg_expr):
        try:
          match (search_ctors(inf, ctor), opt_arg_expr):
            case ((false, scm), None):
              var (preds0, ctor_type) = instantiate(inf.let_level, scm)
              assert(preds0 = [])
              (ctor_type, cstrs)
            case ((false, scm), Some(arg_expr)):
              failwith(wrong_number_of_arguments(expr.Expr.pos, 1, 0))
            case ((true, scm), None):
              failwith(wrong_number_of_arguments(expr.Expr.pos, 0, 1))
            case ((true, scm), Some(arg_expr)):
              var (arg_type, cstrs) = infer_expr(inf, cstrs, arg_expr)
              var (preds0, ctor_type) = instantiate(inf.let_level, scm)
              assert(preds0 = [])
              (apply(inf.let_level, expr.Expr.pos, ctor_type, arg_type), cstrs)
        with:
          case Not_found:
            failwith(unbound_constructor(expr.Expr.pos, ctor))
      case Expr.If(cond_expr, then_expr, else_expr):
        var (cond_type, cstrs) = infer_expr(inf, cstrs, cond_expr)
        var (then_type, cstrs) = infer_expr(inf, cstrs, then_expr)
        var (else_type, cstrs) = infer_expr(inf, cstrs, else_expr)
        require(cond_expr.Expr.pos, Type.at(None, bool_type), cond_type)
        try:
          Type.unify(then_type, else_type)
        with:
          case Type.Unification_error(t1, t2):
            failwith(invalid_if_expr(expr.Expr.pos, then_type, else_type, t1, t2))
        (else_type, cstrs)
      case Expr.Tuple(exprs):
        var (ts, cstrs) = YzList.fold_right(exprs, ([], cstrs))^(expr, (ts, cstrs)):
          var (t, cstrs) = infer_expr(inf, cstrs, expr)
          (t::ts, cstrs)
        (Type.at(Some(expr.Expr.pos), Type.Tuple(ts)), cstrs)
      case Expr.Or(lhs, rhs):
        var pos = expr.Expr.pos
        var or_op = Expr.at(pos, Expr.Var(([], Names.Op("||")), ref()))
        var or_expr = Expr.at(pos, Expr.App(Expr.at(pos, Expr.App(or_op, lhs)), rhs))
        infer_expr(inf, cstrs, or_expr)
      case Expr.And(lhs, rhs):
        var pos = expr.Expr.pos
        var and_op = Expr.at(pos, Expr.Var(([], Names.Op("&&")), ref()))
        var and_expr = Expr.at(pos, Expr.App(Expr.at(pos, Expr.App(and_op, lhs)), rhs))
        infer_expr(inf, cstrs, and_expr)
      case Expr.Seq(lhs, rhs):
        var (lhs_type, cstrs) = infer_expr(inf, cstrs, lhs)
        var (rhs_type, cstrs) = infer_expr(inf, cstrs, rhs)
        require(lhs.Expr.pos, Type.at(None, unit_type), lhs_type)
        (rhs_type, cstrs)
      case Expr.LetVal(pat,val_expr,cont_expr):
        var (inf, cstrs, map) = infer_let_val(inf, cstrs, pat, val_expr)
        infer_expr(inf, cstrs, cont_expr)
      case Expr.LetFun(defs, cont_expr):
        var (inf, decls) = infer_let_fun(inf, defs)
        infer_expr(inf, cstrs, cont_expr)
      case Expr.Match(target_expr, cases):
        var (target_type, cstrs) = infer_expr(inf, cstrs, target_expr)
        var ret_type = Type.make_var(inf.let_level)
        infer_cases(inf, cstrs, target_type, ret_type, cases)
      case Expr.Try(expr, cases):
        var target_type = Type.at(None, exn_type)
        var (ret_type, cstrs) = infer_expr(inf, cstrs, expr)
        infer_cases(inf, cstrs, target_type, ret_type, cases)
      case Expr.Field(record_expr,path):
        var (record_type, cstrs) = infer_expr(inf, cstrs, record_expr)
        try:
          var (is_mutable, access_fun_scm) = search_fields(inf, path)
          var (preds0, access_fun_type) = instantiate(inf.let_level, access_fun_scm)
          assert(preds0 = [])
          (apply(inf.let_level, expr.Expr.pos, access_fun_type, record_type), cstrs)
        with:
          case Not_found:
            failwith(unbound_field_label(expr.Expr.pos, path))
      case Expr.Assign(record_expr, path, val_expr):
        var (record_type, cstrs) = infer_expr(inf, cstrs, record_expr)
        var (val_type, cstrs) = infer_expr(inf, cstrs, val_expr)
        try:
          var (is_mutable, access_fun_scm) = search_fields(inf, path)
          if not(is_mutable):
            failwith(field_not_mutable(expr.Expr.pos, path))
          else:
          var (preds0, access_fun_type) = instantiate(inf.let_level, access_fun_scm)
          assert(preds0 = [])
          var field_type = apply(inf.let_level, expr.Expr.pos, access_fun_type, record_type)
          require(val_expr.Expr.pos, field_type, val_type)
          (Type.at(Some(expr.Expr.pos), unit_type), cstrs)
        with:
          case Not_found:
            failwith(unbound_field_label(expr.Expr.pos, path))
      case Expr.Record(field_defs):
        var record_type = Type.make_var(inf.let_level)
        infer_field_defs(inf, cstrs, expr.Expr.pos, record_type, field_defs)
      case Expr.Update(record_expr, field_defs):
        var (record_type, cstrs) = infer_expr(inf, cstrs, record_expr)
        infer_field_defs(inf, cstrs, expr.Expr.pos, record_type, field_defs)

  def infer_let_val(inf, cstrs, pat, val_expr):
    var (val_type, cstrs) = infer_expr(inf, cstrs, val_expr)
    var (inf, pat_type, map) = infer_pattern(inf, pat)
    require(val_expr.Expr.pos, pat_type, val_type)
    (inf, cstrs, map)

  def infer_let_fun(inf, defs):
    var init = (inf, [])
    var (tmp_inf, defs) = YzList.fold_left(init,defs)^((tmp_inf,defs), (name,val_expr,r)):
      var (tmp_inf, t) = add_type_var(tmp_inf, name)
      (tmp_inf, (name, val_expr, r, t)::defs)
    var let_level = tmp_inf.let_level
    var tmp_inf = incr_let_level(tmp_inf)
    YzList.fold_left((inf,[]), defs)^((inf,decls), (name,val_expr,r,type_var)):
      var (val_type, cstrs) = infer_expr(tmp_inf, [], val_expr)
      require(val_expr.Expr.pos, type_var, val_type)
      var preds = solve_constraints(inf, val_expr.Expr.pos, cstrs)
      var scm = generalize(let_level, preds, val_type)
      (add_asp(inf, name, scm), Decl.Val(name, scm)::decls)

  def infer_cases(inf, cstrs, target_type, ret_type, cases):
    var cstrs = YzList.fold_left(cstrs, cases)^(cstrs, (pat, opt_guard, body_expr)):
      var (inf, pat_type, map) = infer_pattern(inf, pat)
      require(pat.Pattern.pos, target_type, pat_type)
      match opt_guard:
        case None:
          ()
        case Some(guard):
          var (guard_type, cstrs) = infer_expr(inf, cstrs, guard)
          require(guard.Expr.pos, Type.at(None, bool_type), guard_type)
      var (body_type, cstrs) = infer_expr(inf, cstrs, body_expr)
      require(body_expr.Expr.pos, ret_type, body_type)
      cstrs
    (ret_type, cstrs)
  
  def infer_field_defs(inf, cstrs, pos, record_type, field_defs):
    var cstrs = YzList.fold_left(cstrs, field_defs)^(cstrs, (path, val_expr)):
      try:
        var (is_mutable, access_fun_scm) = search_fields(inf, path)
        var (preds0, access_fun_type) = instantiate(inf.let_level, access_fun_scm)
        assert(preds0 = [])
        var field_type = apply(inf.let_level, pos, access_fun_type,record_type)
        var (val_type, cstrs) = infer_expr(inf, cstrs, val_expr)
        require(val_expr.Expr.pos, field_type, val_type)
        cstrs
      with:
        case Not_found:
          failwith(unbound_field_label(pos, path))
    (record_type, cstrs)

  def require(pos, req_type, got_type):
    try:
      Type.unify(req_type, got_type)
    with:
      case Type.Unification_error(t1, t2):
        failwith(required(pos, req_type, got_type, t1, t2))

def make_decls(map):
  List.rev(ValNameMap.fold^(name, t, acc){Decl.Val(name, Scheme.mono(t))::acc}(map, []))

def expand_abbrev(inf, pos, t, opt_conv):
  match opt_conv:
    case None:
      t
    case Some(conv_fun_scm):
      var (preds0, conv_fun_type) = instantiate(inf.let_level, conv_fun_scm)
      assert(preds0 = [])
      apply(inf.let_level, pos, conv_fun_type, t)

def eval(inf, env_ref, type_expr):
  match type_expr.TypeExpr.raw:
    case TypeExpr.Con(typector):
      try:
        var (typector, param_num, opt_conv) = search_typectors(inf, typector)
        if param_num = 0:
          var t = Type.at(Some(type_expr.TypeExpr.pos), Type.Con(typector))
          expand_abbrev(inf, type_expr.TypeExpr.pos, t, opt_conv)
        else:
          failwith(wrong_number_of_arguments(type_expr.TypeExpr.pos, 0, param_num))
      with:
        case Not_found:
         failwith(unbound_type_constructor(type_expr.TypeExpr.pos, typector))
    case TypeExpr.Var(name):
      try:
        List.assoc(name, !env_ref)
      with:
        case Not_found:
          var t = Type.make_var(inf.let_level)
          env_ref := (name, t)::!env_ref
          t
    case TypeExpr.App(typector,ts):
      try:
        var (typector, param_num, opt_conv) = search_typectors(inf, typector)
        var arg_num = List.length(ts)
        if param_num = arg_num:
          var ts = List.map(eval(inf, env_ref), ts)
          var t = Type.at(Some(type_expr.TypeExpr.pos), Type.App(typector, ts))
          expand_abbrev(inf, type_expr.TypeExpr.pos, t, opt_conv)
        else:
          failwith(wrong_number_of_arguments(type_expr.TypeExpr.pos, arg_num, param_num))
      with:
        case Not_found:
         failwith(unbound_type_constructor(type_expr.TypeExpr.pos, typector))
    case TypeExpr.Tuple(ts):
      Type.at(Some(type_expr.TypeExpr.pos), Type.Tuple(List.map(eval(inf, env_ref), ts)))
    case TypeExpr.Fun(t1, t2):
      var t10 = eval(inf, env_ref, t1)
      var t20 = eval(inf, env_ref, t2)
      Type.at(Some(type_expr.TypeExpr.pos), Type.Fun(t10, t20))

def load_type_info(inf, type_info):
  match type_info:
    case TypeInfo.Variant(ctor_decls):
      var let_level = inf.let_level
      var tmp_inf = incr_let_level(inf)
      YzList.fold_left(inf, ctor_decls)^(inf, (ctor_name, opt_param, ctor_type_expr)):
        var ctor_type = eval(tmp_inf, ref([]), ctor_type_expr)
        var ctor_scm = generalize(let_level, [], ctor_type)
        match opt_param:
          case None:
            add_ctor(inf, ctor_name, (false, ctor_scm))
          case Some(_):
            add_ctor(inf, ctor_name, (true, ctor_scm))
    case TypeInfo.Record(field_decls):
      var let_level = inf.let_level
      var tmp_inf = incr_let_level(inf)
      YzList.fold_left(inf, field_decls)^(inf, (is_mutable,field_name,_,access_type_expr)):
        var access_type = eval(tmp_inf, ref([]), access_type_expr)
        var access_scm = generalize(let_level, [], access_type)
        add_field(inf, field_name, (is_mutable, access_scm))

def load_exn_decl(inf, (ctor_name, opt_param, ctor_type_expr)):
  var let_level = inf.let_level
  var tmp_inf = incr_let_level(inf)
  var ctor_type = eval(tmp_inf, ref([]), ctor_type_expr)
  var ctor_scm = generalize(let_level, [], ctor_type)
  match opt_param:
    case None:
      add_ctor(inf, ctor_name, (false, ctor_scm))
    case Some(_):
      add_ctor(inf, ctor_name, (true, ctor_scm))

def load_type_defs(inf, defs):
  var inf = YzList.fold_left(inf, defs)^(inf, type_def):
    match type_def:
      case TypeDef.Repr(name,type_params,_) | TypeDef.Abbrev(name,type_params,_,_):
        var typector = ([inf.mod_name], name)
        var param_num = List.length(type_params)
        add_typector(inf, name, (typector, param_num, None))
  YzList.fold_left(inf, defs)^(inf, type_def):
    match type_def:
      case TypeDef.Repr(name, type_params, type_info):
        load_type_info(inf, type_info)
      case TypeDef.Abbrev(name, type_params, _, conv_type_expr):
        var let_level = inf.let_level
        var tmp_inf = incr_let_level(inf)
        var conv_type = eval(tmp_inf, ref([]), conv_type_expr)
        var conv_scm = generalize(let_level, [], conv_type)
        var typector = ([inf.mod_name], name)
        var param_num = List.length(type_params)
        add_typector(inf, name, (typector, param_num, Some(conv_scm)))

def infer_top(inf, top):
  match top.Top.raw:
    case Top.Expr(expr):
      var (t, cstrs) = infer_expr(inf, [], expr)
      (inf, [Decl.Val(Names.Id("_"), Scheme.mono(t))])
    case Top.LetVal(pat,val_expr):
      var (inf, cstrs, map) = infer_let_val(inf, [], pat, val_expr)
      (inf, make_decls(map))
    case Top.LetFun(defs):
      var (inf, decls) = infer_let_fun(inf, defs)
      (inf, decls)
    case Top.Type(defs):
      var inf = load_type_defs(inf, defs)
      (inf, [])
    case Top.Open(mod_name::mod_path):
      var inf = inf.{opens = (mod_name, mod_path)::inf.opens}
      (inf, [])
    case Top.Open([]):
      assert(false)
    case Top.Exception(exn_decl):
      var inf = load_exn_decl(inf, exn_decl)
      (inf, [])

def load_decl(inf, decl):
  match decl:
    case DeclExpr.Val(name, type_expr):
      var let_level = inf.let_level
      var tmp_inf = incr_let_level(inf)
      var t = eval(tmp_inf, ref([]), type_expr)
      var scm = generalize(let_level, [], t)
      add_asp(inf, name, scm)
    case DeclExpr.AbstrType(name, param_num):
      var typector = ([inf.mod_name], name)
      add_typector(inf, name, (typector, param_num, None))
    case DeclExpr.ConcrType(defs):
      load_type_defs(inf, defs)
    case DeclExpr.Exception(exn_decl):
      load_exn_decl(inf, exn_decl)
      
def enter_module(inf, mod_name):
  inf.{mod_name = mod_name}

def leave_module(inf, mod_name):
  create((mod_name, inf.curr_mod)::inf.mods)
