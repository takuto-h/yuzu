
open Printf

type val_name:
  def Id(string)
  def Op(string)

type ctor_name = val_name
type typector_name = string
type typeclass_name = string

type mod_name = string
type mod_path = list(mod_name)

type val_path = mod_path * val_name
type ctor = mod_path * ctor_name
type typector = mod_path * typector_name
type typeclass = mod_path * typeclass_name

def show_val_name(name):
  match name:
    case Id(str):
      str
    case Op(str):
      sprintf("( %s )", str)

def show_mod_path(path):
  match path:
    case []:
      ""
    case name::names:
      List.fold_left(sprintf("%s.%s"), name, names)

def show_val_path(path):
  match path:
    case ([], val_name):
      show_val_name(val_name)
    case (mod_path, val_name):
      sprintf("%s.%s", show_mod_path(mod_path), show_val_name(val_name))

var show_ctor_name = show_val_name
var show_ctor = show_val_path

def show_typector(typector):
  match typector:
    case ([], typector_name):
      typector_name
    case (mod_path, typector_name):
      sprintf("%s.%s", show_mod_path(mod_path), typector_name)

var show_typeclass = show_typector
