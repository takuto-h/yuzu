
open YzPervasives
open Printf

type t:
  inf : Inf.t
  dummy : unit

var initial_buffer_size = 256
var basic_offset = 2

def create(): {
  inf = Inf.create();
  dummy = ();
}


def load_iface_file(compiler, fname_in):
  var chopped = Filename.chop_suffix(fname_in, ".yzi")
  var mod_name = String.capitalize(chopped)
  with_open_in(fname_in)^(chan_in):
    var strm = Stream.of_channel(chan_in)
    var src = Source.create(fname_in, strm, Pos.File)
    var lexer = Lexer.create(src)
    var parser = Parser.create(lexer)
    var compiler = compiler.{inf  = Inf.enter_module(compiler.inf, mod_name)}
    try:
      def loop(compiler):
        match Parser.parse_decl(parser):
          case None:
            Some(compiler.{inf = Inf.leave_module(compiler.inf, mod_name)})
          case Some(decl):
            var inf = Inf.load_decl(compiler.inf, decl)
            loop(compiler.{inf = inf})
      loop(compiler)
    with:
      case Failure(message):
        eprintf("%s", message)
        flush(stderr)
        None

def compile_file(compiler, fname_in):
  var chopped = Filename.chop_suffix(fname_in, ".yz")
  var fname_out = sprintf("%s.ml", chopped)
  var mod_name = String.capitalize(chopped)
  with_open_in(fname_in)^(chan_in):
  with_open_out(fname_out)^(chan_out):
    var strm = Stream.of_channel(chan_in)
    var src = Source.create(fname_in, strm, Pos.File)
    var lexer = Lexer.create(src)
    var parser = Parser.create(lexer)
    var trans = Trans.create(basic_offset)
    try:
      def loop(compiler):
        match Parser.parse(parser):
          case None:
            Some(compiler.{inf = Inf.leave_module(compiler.inf, mod_name)})
          case Some(top):
            //var (inf, decl) = Inf.infer_top(compiler.inf, top)
            var inf = compiler.inf
            var result = Trans.translate_top(trans, top)
            fprintf(chan_out, "%s\n", result)
            loop(compiler.{inf = inf})
      loop(compiler)
    with:
      case Failure(message):
        eprintf("%s", message)
        flush(stderr)
        None

def compile_string(compiler, fname_in, str):
  var buf_decls = Buffer.create(initial_buffer_size)
  var buf_output = Buffer.create(initial_buffer_size)
  var strm = Stream.of_string(str)
  var src = Source.create(fname_in, strm, Pos.String(str))
  var lexer = Lexer.create(src)
  var parser = Parser.create(lexer)
  var trans = Trans.create(basic_offset)
  try:
    def loop(compiler):
      match Parser.parse(parser):
        case None:
          Some(compiler, Buffer.contents(buf_decls), Buffer.contents(buf_output))
        case Some(top):
          var (inf, decls) = Inf.infer_top(compiler.inf, top)
          List.iter^(decl){Buffer.add_string(buf_decls, Decl.show(decl))}(decls)
          var result = Trans.translate_top(trans, top)
          Buffer.add_string(buf_output, result)
          loop(compiler.{inf = inf})
    loop(compiler)
  with:
    case Failure(message):
      eprintf("%s", message)
      flush(stderr)
      None

def read(buf):
  var line = read_line()
  if line = "":
    Buffer.contents(buf)
  else:
    Buffer.add_string(buf, sprintf("%s\n", line))
    read(buf)

def interactive(compiler):
  var compiler = compiler.{inf = Inf.enter_module(compiler.inf, "Interactive")}
  def loop(compiler):
    printf("---\n")
    try:
      var str = read(Buffer.create(initial_buffer_size))
      match compile_string(compiler, "<interactive>", str):
        case None:
          loop(compiler)
        case Some(compiler, decls, output):
          printf("decls:\n%s", decls)
          printf("output:\n%s", output)
          loop(compiler)
    with:
      case End_of_file:
        compiler
  loop(compiler)
  
def load_and_compile(compiler, fnames):
  match fnames:
    case []:
      Some(compiler)
    case fname_in::fnames when Filename.check_suffix(fname_in, ".yz"):
      YzOption.bind(compile_file(compiler, fname_in))^(compiler):
      load_and_compile(compiler, fnames)
    case fname_in::fnames when Filename.check_suffix(fname_in, ".yzi"):
      YzOption.bind(load_iface_file(compiler, fname_in))^(compiler):
      load_and_compile(compiler, fnames)
    case fname_in::_:
      eprintf("Not knowing what to do with '%s'\n", fname_in)
      None
