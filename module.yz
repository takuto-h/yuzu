
type require_argument = bool

type t:
  mods : list(Names.mod_name * t)
  asp : list(Names.val_name * Scheme.t)
  ctors : list(Names.ctor_name * (require_argument * Scheme.t))
  typectors : list(Names.typector * int)

def make(mods, asp, ctors, typectors): {
  mods = mods;
  asp = asp;
  ctors = ctors;
  typectors = typectors;
}

def find_asp(modl, mod_path, name):
  match mod_path:
    case []:
      List.assoc(name, modl.asp)
    case mod_name::mod_path:
      var modl = List.assoc(mod_name, modl.mods)
      find_asp(modl, mod_path, name)

def find_ctor(modl, mod_path, name):
  match mod_path:
    case []:
      List.assoc(name, modl.ctors)
    case mod_name::mod_path:
      var modl = List.assoc(mod_name, modl.mods)
      find_ctor(modl, mod_path, name)
