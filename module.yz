
type require_argument = bool

type t:
  mods : list(Names.mod_name * t)
  asp : list(Names.val_name * Scheme.t)
  ctors : list(Names.ctor_name * (require_argument * Scheme.t))
  typectors : list(Names.typector_name * (Names.typector * int * option(Scheme.t)))

def make(mods, asp, ctors, typectors): {
  mods = mods;
  asp = asp;
  ctors = ctors;
  typectors = typectors;
}

def search_alist(get_alist, modl, mod_path, name):
  match mod_path:
    case []:
      List.assoc(name, get_alist(modl))
    case mod_name::mod_path:
      var modl = List.assoc(mod_name, modl.mods)
      search_alist(get_alist, modl, mod_path, name)

def search_asp(modl, mod_path, name):
  search_alist^(modl){modl.asp}(modl, mod_path, name)

def search_ctors(modl, mod_path, name):
  search_alist^(modl){modl.ctors}(modl, mod_path, name)

def search_typectors(modl, mod_path, name):
  search_alist^(modl){modl.typectors}(modl, mod_path, name)
