
open Printf

type t:
  basic_offset : int
  indent_level : int
  
def create(basic_offset): {
  basic_offset = basic_offset;
  indent_level = 0;
}

var initial_buffer_size = 256

def incr_indent_level(trans): trans.{
  indent_level = trans.indent_level + 1;
}

def indent({basic_offset;indent_level}, str):
  var offset = basic_offset * indent_level
  sprintf("%s%s", String.make(offset, ' '), str)

def translate_literal(lit):
  match lit:
    case Literal.Unit:
      "()"
    case Literal.Int(n):
      sprintf("%d", n)
    case Literal.String(str):
      sprintf("\"%s\"", str)
    case Literal.Char(str):
      sprintf("'%s'", str)
    case Literal.Bool(bool):
      sprintf("%B", bool)

rec:
  def translate_pattern(pat):
    match pat.Pattern.raw:
      case Pattern.Con(lit):
        translate_literal(lit)
      case Pattern.Var(name):
        Names.show_val_name(name)
      case Pattern.Ctor(ctor,opt_pat):
        var str_ctor = Names.show_ctor(ctor)
        match opt_pat:
          case None:
            str_ctor
          case Some(pat):
            var str_pat = translate_pattern(pat)
            sprintf("(%s %s)", str_ctor, str_pat)
      case Pattern.Tuple(pat::pats):
        var str_pat_list = YzList.fold_left(translate_pattern(pat), pats)^(acc, elem):
          sprintf("%s, %s", acc, translate_pattern(elem))
        sprintf("(%s)", str_pat_list)
      case Pattern.Tuple([]):
        assert(false)
      case Pattern.Record(fields):
        var str_fields = YzList.fold_left("", fields)^(acc, elem):
          sprintf("%s%s;", acc, translate_field_pattern(elem))
        sprintf("{%s}", str_fields)
      case Pattern.Or(lhs,rhs):
        var str_lhs = translate_pattern(lhs)
        var str_rhs = translate_pattern(rhs)
        sprintf("(%s | %s)", str_lhs, str_rhs)
      case Pattern.As(pat,name):
        var str_pat = translate_pattern(pat)
        var str_name = Names.show_val_name(name)
        sprintf("(%s as %s)", str_pat, str_name)

  def translate_field_pattern(field_pat):
    match field_pat:
      case (path, None):
        sprintf("%s", Names.show_val_path(path))
      case (path, Some(pat)):
        sprintf("%s=%s", Names.show_val_path(path), translate_pattern(pat))

rec:
  def translate_expr(trans, expr):
    match expr.Expr.raw:
      case Expr.Con(lit):
        translate_literal(lit)
      case Expr.Var(path):
        Names.show_val_path(path)
      case Expr.Abs(param_pat,body_expr):
        var str_param = translate_pattern(param_pat)
        var trans_body = incr_indent_level(trans)
        var str_body = translate_expr(trans_body, body_expr)
        sprintf(
          "begin fun %s ->\n%s\n%s",
          str_param, indent(trans_body, str_body), indent(trans, "end")
        )
      case Expr.App(fun_expr,arg_expr):
        var str_fun = translate_expr(trans, fun_expr)
        var str_arg = translate_expr(trans, arg_expr)
        sprintf("(%s %s)", str_fun, str_arg)
      case Expr.Ctor(ctor, opt_arg_expr):
        var str_ctor = Names.show_ctor(ctor)
        match opt_arg_expr:
          case None:
            str_ctor
          case Some(arg_expr):
            var str_arg = translate_expr(trans, arg_expr)
            sprintf("(%s %s)", str_ctor, str_arg)
      case Expr.If(cond_expr,then_expr,else_expr):
        var str_cond = translate_expr(trans, cond_expr)
        var trans_then_else = incr_indent_level(trans)
        var str_then = translate_expr(trans_then_else, then_expr)
        var str_else = translate_expr(trans_then_else, else_expr)
        sprintf(
          "begin if %s then\n%s\n%s\n%s\n%s",
          str_cond,
          indent(trans_then_else, str_then),
          indent(trans, "else"),
          indent(trans_then_else, str_else),
          indent(trans, "end")
        )
      case Expr.Tuple(x::xs):
        var str_x = translate_expr(trans, x)
        var str_x_xs = YzList.fold_left(str_x, xs)^(acc, elem):
          sprintf("%s, %s", acc, translate_expr(trans, elem))
        sprintf("(%s)", str_x_xs)
      case Expr.Tuple([]):
        assert(false)
      case Expr.Record(field_defs):
        var trans_field_def = incr_indent_level(trans)
        var str_field_defs = YzList.fold_left("", field_defs)^(acc, elem):
          var str_field_def = translate_field_def(trans_field_def, elem)
          sprintf("%s%s;\n", acc, indent(trans_field_def, str_field_def))
        sprintf("{\n%s%s", str_field_defs, indent(trans, "}"))
      case Expr.Update(expr,field_defs):
        var trans_field_def = incr_indent_level(trans)
        var str_expr = translate_expr(trans_field_def, expr)
        var str_field_defs = YzList.fold_left("", field_defs)^(acc, elem):
          var str_field_def = translate_field_def(trans_field_def, elem)
          sprintf("%s%s;\n", acc, indent(trans_field_def, str_field_def))
        sprintf(
          "{\n%s with\n%s%s",
          indent(trans_field_def, str_expr), str_field_defs, indent(trans, "}")
        )
      case Expr.Match(target_expr,cases):
        var str_target = translate_expr(trans, target_expr)
        var trans_case = incr_indent_level(trans)
        var str_cases = YzList.fold_left("", cases)^(acc, elem):
          sprintf("%s%s", acc, translate_case(trans_case, elem))
        sprintf("begin match %s with%s\n%s", str_target, str_cases, indent(trans, "end"))
      case Expr.LetVal(pat,val_expr,cont_expr):
        var str_pat = translate_pattern(pat)
        var str_val = translate_expr(trans, val_expr)
        var str_cont = translate_expr(trans, cont_expr)
        sprintf(
          "begin let %s = %s in\n%s\n%s",
          str_pat, str_val, indent(trans, str_cont), indent(trans, "end")
        )
      case Expr.LetFun((name,val_expr)::defs, cont_expr):
        var str_name = Names.show_val_name(name)
        var str_val = translate_expr(trans, val_expr)
        var str_let_rec = sprintf("let rec %s = %s", str_name, str_val)
        var str_let_rec = YzList.fold_left(str_let_rec, defs)^(acc, (name,val_expr)):
          var str_name = Names.show_val_name(name)
          var str_val = translate_expr(trans, val_expr)
          sprintf("%s\nand %s = %s", acc, str_name, str_val)
        var str_cont = translate_expr(trans, cont_expr)
        sprintf(
          "begin %s in\n%s\n%s", str_let_rec, indent(trans, str_cont), indent(trans, "end")
        )
      case Expr.LetFun([], cont_expr):
        assert(false)
      case Expr.Or(lhs,rhs):
        var str_lhs = translate_expr(trans, lhs)
        var str_rhs = translate_expr(trans, rhs)
        sprintf("(%s || %s)", str_lhs, str_rhs)
      case Expr.And(lhs,rhs):
        var str_lhs = translate_expr(trans, lhs)
        var str_rhs = translate_expr(trans, rhs)
        sprintf("(%s && %s)", str_lhs, str_rhs)
      case Expr.Seq(lhs,rhs):
        var str_lhs = translate_expr(trans, lhs)
        var str_rhs = translate_expr(trans, rhs)
        sprintf(
          "begin\n%s;\n%s\n%s",
          indent(trans, str_lhs), indent(trans, str_rhs), indent(trans, "end")
        )
      case Expr.Field(expr,path):
        var str_expr = translate_expr(trans, expr)
        var str_path = Names.show_val_path(path)
        sprintf("%s.%s", str_expr, str_path)
      case Expr.Assign(lhs,rhs):
        var str_lhs = translate_expr(trans, lhs)
        var str_rhs = translate_expr(trans, rhs)
        sprintf("(%s <- %s)", str_lhs, str_rhs)
      case Expr.Try(expr,cases):
        var trans_expr = incr_indent_level(trans)
        var str_expr = translate_expr(trans_expr, expr)
        var str_cases = YzList.fold_left("", cases)^(acc, elem):
          sprintf("%s%s", acc, translate_case(trans_expr, elem))
        sprintf(
          "begin try\n%s\n%s%s\n%s",
          indent(trans_expr, str_expr),
          indent(trans, "with"),
          str_cases,
          indent(trans, "end")
        )

  def translate_field_def(trans, (path,expr)):
    var str_path = Names.show_val_path(path)
    var str_expr = translate_expr(trans, expr)
    sprintf("%s = %s", str_path, str_expr)

  def translate_case(trans, c):
    match c:
      case (pat,None,body_expr):
        var str_pat = sprintf("| %s ->", translate_pattern(pat))
        var trans_body = incr_indent_level(trans)
        var str_body = translate_expr(trans_body, body_expr)
        sprintf("\n%s\n%s", indent(trans, str_pat), indent(trans_body, str_body))
      case (pat,Some(guard),body_expr):
        var str_guard = translate_expr(trans, guard)
        var str_pat = sprintf("| %s when %s ->", translate_pattern(pat), str_guard)
        var trans_body = incr_indent_level(trans)
        var str_body = translate_expr(trans_body, body_expr)
        sprintf("\n%s\n%s", indent(trans, str_pat), indent(trans_body, str_body))

def translate_type_expr(t):
  match t.TypeExpr.raw:
    case TypeExpr.Con(typector):
      Names.show_typector(typector)
    case TypeExpr.Var(name):
      sprintf("'%s", name)
    case TypeExpr.App(typector,t::ts):
      var str_typector = Names.show_typector(typector)
      var str_types = YzList.fold_left(translate_type_expr(t), ts)^(acc, elem):
        sprintf("%s, %s", acc, translate_type_expr(elem))
      sprintf("(%s) %s", str_types, str_typector)
    case TypeExpr.App(typector,[]):
      assert(false)
    case TypeExpr.Tuple(t::ts):
      var str_types = YzList.fold_left(translate_type_expr(t), ts)^(acc, elem):
        sprintf("%s * %s", acc, translate_type_expr(elem))
      sprintf("(%s)", str_types)
    case TypeExpr.Tuple([]):
      assert(false)
    case TypeExpr.Fun(t1, t2):
      var str_t1 = translate_type_expr(t1)
      var str_t2 = translate_type_expr(t2)
      sprintf("(%s -> %s)", str_t1, str_t2)

def translate_ctor_decl(ctor_decl):
  match ctor_decl:
    case (ctor_name,None,_):
      sprintf("| %s\n", Names.show_ctor_name(ctor_name))
    case (ctor_name,Some(t),_):
      var str_type = translate_type_expr(t)
      sprintf("| %s of %s\n", Names.show_ctor_name(ctor_name), str_type)

def translate_field_decl((is_mutable, field_name, t)):
  if is_mutable:
    sprintf("mutable %s : %s;\n", Names.show_val_name(field_name), translate_type_expr(t))
  else:
    sprintf("%s : %s;\n", Names.show_val_name(field_name), translate_type_expr(t))

def translate_exn_decl(exn_decl):
  match exn_decl:
    case (ctor_name,None):
      sprintf("%s", Names.show_ctor_name(ctor_name))
    case (ctor_name,Some(t)):
      var str_type = translate_type_expr(t)
      sprintf("%s of %s", Names.show_ctor_name(ctor_name), str_type)

def translate_type_info(trans, type_info):
  match type_info:
    case TypeInfo.Variant(ctor_decls):
      var trans_ctor_decl = incr_indent_level(trans)
      var str_ctor_decls = YzList.fold_left("", ctor_decls)^(acc, elem):
        sprintf("%s%s", acc, indent(trans_ctor_decl, translate_ctor_decl(elem)))
      sprintf("\n%s", str_ctor_decls)
    case TypeInfo.Record(field_decls):
      var trans_field_decl = incr_indent_level(trans)
      var str_field_decls = YzList.fold_left("", field_decls)^(acc, elem):
        sprintf("%s%s", acc, indent(trans_field_decl, translate_field_decl(elem)))
      sprintf("{\n%s%s", str_field_decls, indent(trans, "}"))

def translate_type_head(name, params):
  match params:
    case []:
      name
    case param::params:
      var str_params = YzList.fold_left(translate_type_expr(param), params)^(acc, param):
        sprintf("%s, %s", acc, translate_type_expr(param))
      sprintf("(%s) %s", str_params, name)

def translate_type_def(trans, type_def):
  match type_def:
    case TypeDef.Abbrev(name,params,t):
      var str_head = translate_type_head(name, params)
      var str_type = translate_type_expr(t)
      sprintf("%s = %s", str_head, str_type)
    case TypeDef.Repr(name,params,info):
      var str_head = translate_type_head(name, params)
      var str_info = translate_type_info(trans, info)
      sprintf("%s = %s", str_head, str_info)

def translate_top(trans, top):
  match top.Top.raw:
    case Top.Expr(expr):
      var str_expr = translate_expr(trans, expr)
      sprintf("let () = %s\n", str_expr)
    case Top.LetVal(pat,expr):
      var str_pat = translate_pattern(pat)
      var str_expr = translate_expr(trans, expr)
      sprintf("let %s = %s\n", str_pat, str_expr)
    case Top.LetFun((name,expr)::defs):
      var str_name = Names.show_val_name(name)
      var str_expr = translate_expr(trans, expr)
      var str_let_rec = sprintf("let rec %s = %s\n", str_name, str_expr)
      YzList.fold_left(str_let_rec, defs)^(acc, (name,expr)):
        var str_name = Names.show_val_name(name)
        var str_expr = translate_expr(trans, expr)
        sprintf("%s\nand %s = %s\n", acc, str_name, str_expr)
    case Top.LetFun([]):
      assert(false)
    case Top.Open(path):
      var str_path = Names.show_mod_path(path)
      sprintf("open %s\n", str_path)
    case Top.Type(type_def::defs):
      var str_type_def = translate_type_def(trans, type_def)
      var str_type = sprintf("type %s\n", str_type_def)
      var str_type = YzList.fold_left(str_type, defs)^(acc, type_def):
        var str_type_def = translate_type_def(trans, type_def)
        sprintf("%s\nand %s\n", acc, str_type_def)
      str_type
    case Top.Type([]):
      assert(false)
    case Top.Module(name,ftor,arg):
      var str_name = name
      var str_ftor = Names.show_mod_path(ftor)
      var str_arg = Names.show_mod_path(arg)
      sprintf("module %s = %s(%s)\n", str_name, str_ftor, str_arg)
    case Top.Exception(exn_decl):
      var str_exn_decl = translate_exn_decl(exn_decl)
      sprintf("exception %s\n", str_exn_decl)
