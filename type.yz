
open Printf

rec:
  type typevar = ref(option(t))
  type t:
    pos: option(Pos.t)
    raw: raw
  type raw:
    def Con(Names.typector)
    def Var(int * typevar)
    def Gen(int)
    def App(Names.typector * list(t))
    def Tuple(list(t))
    def Fun(t * t)

def at(pos, raw): {
  pos = pos;
  raw = raw;
}

def make_var(let_level):
  at(None, Var(let_level, ref(None)))

def map(func, t):
  match t.raw:
    case Con(_):
      t
    case Var(_,t_ref):
      match !t_ref:
        case None:
          t
        case Some(t_val):
          map(func, t_val)
    case Gen(n):
      func(n)
    case App(typector,t_args):
      var t_args = List.map(map(func), t_args)
      at(t.pos, App(typector, t_args))
    case Tuple(ts):
      var ts = List.map(map(func), ts)
      at(t.pos, Tuple(ts))
    case Fun(t_param, t_ret):
      var t_param = map(func, t_param)
      var t_ret = map(func, t_ret)
      at(t.pos, Fun(t_param, t_ret))

def occurs(t_ref0, t):
  match t.raw:
    case Con(_):
      false
    case Var(_,t_ref):
      match !t_ref:
        case None:
          t_ref == t_ref0
        case Some(t_val):
          occurs(t_ref0, t_val)
    case Gen(_):
      assert(false)
    case App(_,t_args):
      List.exists(occurs(t_ref0), t_args)
    case Tuple(ts):
      List.exists(occurs(t_ref0), ts)
    case Fun(t_param, t_ret):
      occurs(t_ref0, t_param) || occurs(t_ref0, t_ret)

exception Unification_error(t * t)

def unify(t1, t2):
  match (t1.raw, t2.raw):
    case (Var(_,t1_ref),Var(_,t2_ref)) when t1_ref == t2_ref:
      ()
    case (Var(lv1,t1_ref),Var(lv2,t2_ref)):
      match (!t1_ref, !t2_ref):
        case (Some(t10),_):
          unify(t10, t2)
        case (_,Some(t20)):
          unify(t1, t20)
        case (None,None) when lv1 > lv2:
          t1_ref := Some(t2)
        case (None,None) when lv1 < lv2:
          t2_ref := Some(t1)
        case (None,None):
          t2_ref := Some(t1)
    case (Var(lv1,t1_ref),_):
      match !t1_ref:
        case Some(t10):
          unify(t10, t2)
        case None:
          if occurs(t1_ref, t2):
            raise(Unification_error(t1, t2))
          else:
            t1_ref := Some(t2)
    case (_,Var(lv2, t2_ref)):
      match !t2_ref:
        case Some(t20):
          unify(t1, t20)
        case None:
          if occurs(t2_ref, t1):
            raise(Unification_error(t1, t2))
          else:
            t2_ref := Some(t1)
    case (Con(tc1), Con(tc2)) when tc1 = tc2:
      ()
    case (Con(_),_):
      raise(Unification_error(t1, t2))
    case (Gen(_),_):
      assert(false)
    case (App(tc1,ts1),App(tc2,ts2)) when tc1 = tc2:
      List.iter2(unify, ts1, ts2)
    case (App(_,_),_):
      raise(Unification_error(t1, t2))
    case (Tuple(ts1),Tuple(ts2)):
      List.iter2(unify, ts1, ts2)
    case (Tuple(_),_):
      raise(Unification_error(t1, t2))
    case (Fun(t11,t12),Fun(t21,t22)):
      unify(t11, t21)
      unify(t12, t22)
    case (Fun(_,_),_):
      raise(Unification_error(t1, t2))

type shower:
  mutable var_map : list(typevar * string)
  gen_map : array(string)

def create_shower(gen_num): {
  var_map = [];
  gen_map = Array.init(gen_num, sprintf("`t%d"));
}

rec:
  def show(shower, t):
    match t.raw:
      case Con(tc):
        Names.show_typector(tc)
      case Var(_,t_ref):
        match !t_ref:
          case Some(t_val):
            show(shower, t_val)
          case None:
            try:
              List.assq(t_ref, shower.var_map)
            with:
              case Not_found:
                var str = sprintf("`_t%d", List.length(shower.var_map))
                shower.var_map <- (t_ref, str)::shower.var_map
                str
      case Gen(n):
        Array.get(shower.gen_map, n)
      case App(tc,t_args):
        sprintf("%s(%s)", Names.show_typector(tc), show_list(shower, ", ", t_args))
      case Tuple(ts):
        sprintf("(%s)", show_list(shower, " * ", ts))
      case Fun(t_param, t_ret):
        sprintf("(%s -> %s)", show(shower, t_param), show(shower, t_ret))

  def show_list(shower, sep, ts):
    match ts:
      case []:
        assert(false)
      case x::xs:
        YzList.fold_left(show(shower, x), xs)^(acc, elem):
          sprintf("%s%s%s", acc, sep, show(shower, elem))

def show_origin(shower, descr, t):
  match t.pos:
    case None:
      ""
    case Some(pos):
      sprintf(
        "%s: '%s' of %s\n%s",
        Pos.show(pos), show(shower, t), descr, Pos.show_source(pos)
      )
