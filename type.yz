
type t:
  def Con(Names.typector)
  def Var(int * ref(option(t)))
  def Gen(int)
  def App(Names.typector * list(t))
  def Tuple(list(t))
  def Fun(t * t)

def make_var(let_level):
  Var(let_level, ref(None))

def map(func, t):
  match t:
    case Con(_):
      t
    case Var(_,t_ref):
      match !t_ref:
        case None:
          t
        case Some(t_val):
          map(func, t_val)
    case Gen(n):
      func(n)
    case App(typector,t_args):
      var t_args = List.map(map(func), t_args)
      App(typector, t_args)
    case Tuple(ts):
      var ts = List.map(map(func), ts)
      Tuple(ts)
    case Fun(t_param, t_ret):
      var t_param = map(func, t_param)
      var t_ret = map(func, t_ret)
      Fun(t_param, t_ret)

def occurs(t_ref0, t):
  match t:
    case Con(_):
      false
    case Var(_,t_ref):
      match !t_ref:
        case None:
          t_ref == t_ref0
        case Some(t_val):
          occurs(t_ref0, t_val)
    case Gen(_):
      assert(false)
    case App(_,t_args):
      List.exists(occurs(t_ref0), t_args)
    case Tuple(ts):
      List.exists(occurs(t_ref0), ts)
    case Fun(t_param, t_ret):
      occurs(t_ref0, t_param) || occurs(t_ref0, t_ret)

def unify(occurs_check_error, unification_error, t1, t2):
  def loop(t1, t2):
    match (t1, t2):
      case (Var(_,t1_ref),Var(_,t2_ref)) when t1_ref == t2_ref:
        ()
      case (Var(lv1,t1_ref),Var(lv2,t2_ref)):
        match (!t1_ref, !t2_ref):
          case (Some(t10),_):
            loop(t10, t2)
          case (_,Some(t20)):
            loop(t1, t20)
          case (None,None) when lv1 > lv2:
            t1_ref := Some(t2)
          case (None,None) when lv1 < lv2:
            t2_ref := Some(t1)
          case (None,None):
            t2_ref := Some(t1)
      case (Var(lv1,t1_ref),_):
        match !t1_ref:
          case Some(t10):
            loop(t10, t2)
          case None:
            if occurs(t1_ref, t2):
              occurs_check_error()
            else:
              t1_ref := Some(t2)
      case (_,Var(lv2, t2_ref)):
        match !t2_ref:
          case Some(t20):
            loop(t1, t20)
          case None:
            if occurs(t2_ref, t1):
              occurs_check_error()
            else:
              t2_ref := Some(t1)
      case (Con(tc1), Con(tc2)) when tc1 = tc2:
        ()
      case (Con(_),_):
        unification_error(t1, t2)
      case (Gen(_),_):
        assert(false)
      case (App(tc1,ts1),App(tc2,ts2)) when tc1 = tc2:
        List.iter2(loop, ts1, ts2)
      case (App(_,_),_):
        unification_error(t1, t2)
      case (Tuple(ts1),Tuple(ts2)):
        List.iter2(loop, ts1, ts2)
      case (Tuple(_),_):
        unification_error(t1, t2)
      case (Fun(t11,t12),Fun(t21,t22)):
        loop(t11, t21)
        loop(t12, t22)
      case (Fun(_,_),_):
        unification_error(t1, t2)
  loop(t1, t2)
