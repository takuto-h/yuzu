
type t:
  def Con(Names.typector)
  def Var(int * ref(option(t)))
  def Gen(int)
  def App(Names.typector * list(t))
  def Tuple(list(t))
  def Fun(t * t)

def make_var(let_level):
  Var(let_level, ref(None))

rec:
  def map(t, func):
    match t:
      case Con(_):
        t
      case Var(_,t_ref):
        match !t_ref:
          case None:
            t
          case Some(t_val):
            map(t_val, func)
      case Gen(n):
        func(n)
      case App(typector,t_args):
        var t_args = map_list(t_args, func)
        App(typector, t_args)
      case Tuple(ts):
        var ts = map_list(ts, func)
        Tuple(ts)
      case Fun(t_param, t_ret):
        var t_param = map(t_param, func)
        var t_ret = map(t_ret, func)
        Fun(t_param, t_ret)

  def map_list(ts, func):
    var ts_ref = ref([])
    YzList.iter(ts)^(t_elem):
      ts_ref := map(t_elem, func)::!ts_ref
    List.rev(!ts_ref)

def occurs(t_ref0, t):
  match t:
    case Con(_):
      false
    case Var(_,t_ref):
      match !t_ref:
        case None:
          t_ref == t_ref0
        case Some(t_val):
          occurs(t_ref0, t_val)
    case Gen(_):
      assert(false)
    case App(_,t_args):
      List.exists(occurs(t_ref0), t_args)
    case Tuple(ts):
      List.exists(occurs(t_ref0), ts)
    case Fun(t_param, t_ret):
      occurs(t_ref0, t_param) || occurs(t_ref0, t_ret)

rec:
  def unify(t1, t2, occurs_check_error, unification_error):
    match (t1, t2):
      case (Var(_, t1_ref),Var(_, t2_ref)) when t1_ref == t2_ref:
        ()
      case (Var(lv1, t1_ref),Var(lv2, t2_ref)):
        match (!t1_ref, !t2_ref):
          case (Some(t10),_):
            unify(t10, t2, occurs_check_error, unification_error)
          case (_,Some(t20)):
            unify(t1, t20, occurs_check_error, unification_error)
          case (None,None) when lv1 > lv2:
            t1_ref := Some(t2)
          case (None,None) when lv1 < lv2:
            t2_ref := Some(t1)
          case (None,None):
            t2_ref := Some(t1)
      case (Var(lv1, t1_ref),_):
        match !t1_ref:
          case Some(t10):
            unify(t10, t2, occurs_check_error, unification_error)
          case None:
            if occurs(t1_ref, t2):
              occurs_check_error()
            else:
              t1_ref := Some(t2)
      case (_,Var(lv2, t2_ref)):
        match !t2_ref:
          case Some(t20):
            unify(t1, t20, occurs_check_error, unification_error)
          case None:
            if occurs(t2_ref, t1):
              occurs_check_error()
            else:
              t2_ref := Some(t1)
      case (Con(tc1), Con(tc2)) when tc1 = tc2:
        ()
      case (Con(_),_):
        unification_error(t1, t2)
      case (Gen(_),_):
        assert(false)
      case (App(tc1,ts1),App(tc2,ts2)) when tc1 = tc2:
        unify_list(ts1, ts2, occurs_check_error, unification_error)
      case (App(_,_),_):
        unification_error(t1, t2)
      case (Tuple(ts1),Tuple(ts2)):
        unify_list(ts1, ts2, occurs_check_error, unification_error)
      case (Tuple(_),_):
        unification_error(t1, t2)
      case (Fun(t11,t12),Fun(t21,t22)):
        unify(t11, t21, occurs_check_error, unification_error)
        unify(t12, t22, occurs_check_error, unification_error)
      case (Fun(_,_),_):
        unification_error(t1, t2)

  def unify_list(ts1, ts2, occurs_check_error, unification_error):
    YzList.iter2(ts1, ts2)^(t1, t2):
      unify(t1, t2, occurs_check_error, unification_error)
