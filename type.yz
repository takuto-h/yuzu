
type t:
  def Con(Names.typector)
  def Var(int * ref(option(t)))
  def Gen(int)
  def App(Names.typector * list(t))
  def Tuple(list(t))

def make_var(let_level):
  Var(let_level, ref(None))

rec:
  def map(t, func):
    match t:
      case Con(_):
        t
      case Var(_,t_ref):
        match !t_ref:
          case None:
            t
          case Some(t_val):
            map(t_val, func)
      case Gen(n):
        func(n)
      case App(typector,t_args):
        var t_args = map_list(t_args, func)
        App(typector, t_args)
      case Tuple(ts):
        var ts = map_list(ts, func)
        Tuple(ts)

  def map_list(ts, func):
    var ts_ref = ref([])
    YzList.iteri(ts)^(i, t_elem):
      ts_ref := map(t_elem, func)::!ts_ref
    List.rev(!ts_ref)
